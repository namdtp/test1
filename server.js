// server.js - NodeJS Print API cho nhi·ªÅu m√°y in POS qua LAN

const express = require('express');
const cors = require('cors');
const { printer: ThermalPrinter, types: PrinterTypes } = require('node-thermal-printer');

const app = express();
app.use(cors());
app.use(express.json());

// Khai b√°o ƒë·ªãa ch·ªâ m√°y in
const PRINTERS = {
  bar: '192.168.1.229', // IP m√°y in qu·∫ßy bar
  bep: '192.168.1.230'  // IP m√°y in b·∫øp
};

// H√†m d·ª±ng h√≥a ƒë∆°n, c√≥ th·ªÉ t√πy ch·ªânh th√™m n·∫øu mu·ªën
function buildAndPrintBill({ order, menuMap = {}, itemsBill = null, discount = 0, extraFee = 0, customerName = '', note = '', showVietQR = false }, printerIp) {
  // Chu·∫©n b·ªã danh s√°ch m√≥n
  const items = itemsBill || (order.items || []).filter(item => item.status !== 'cancel');
  let subtotal = 0;
  items.forEach(item => {
    const price = menuMap[item.name]?.price ?? item.price ?? 0;
    subtotal += price * (item.quantity || 0);
  });
  const total = subtotal - discount + extraFee;

  // Kh·ªüi t·∫°o m√°y in
  const printer = new ThermalPrinter({
    type: PrinterTypes.EPSON,
    interface: `tcp://${printerIp}:9100`,
    characterSet: 'WPC1258', // Th∆∞·ªùng l√† t·ªët nh·∫•t cho ti·∫øng Vi·ªát
    removeSpecialCharacters: false,
    lineCharacter: '-',
  });

  // ===== Header =====
  printer.alignCenter();
  printer.setTextDoubleHeight();
  printer.setTextDoubleWidth();
  printer.println("H√ìA ƒê∆†N THANH TO√ÅN");
  printer.setTextNormal();
  printer.drawLine();

  printer.alignLeft();
  printer.println(`B√†n: ${order.tableId || ''}`);
  printer.println(`M√£ ƒë∆°n: ${order.orderCode || order.id}`);
  printer.println(`Th·ªùi gian: ${order.createdAt ? new Date(order.createdAt).toLocaleString('vi-VN') : ''}`);
  if (customerName) printer.println(`Kh√°ch: ${customerName}`);

  printer.drawLine();

  // ===== Danh s√°ch m√≥n =====
  items.forEach(item => {
    const price = menuMap[item.name]?.price ?? item.price ?? 0;
    const lineTotal = price * item.quantity;
    // Format d√≤ng: T√™n xS·ªë l∆∞·ª£ng [th√†nh ti·ªÅn]
    printer.println(
      `${item.name}`.padEnd(18, ' ').slice(0, 18) +
      `x${item.quantity}`.padEnd(4, ' ') +
      `${lineTotal.toLocaleString('vi-VN')}‚Ç´`.padStart(12, ' ')
    );
  });

  printer.drawLine();
  printer.alignRight();
  printer.println(`T·∫°m t√≠nh:   ${subtotal.toLocaleString('vi-VN')}‚Ç´`);
  if (discount) printer.println(`Gi·∫£m gi√°:  -${discount.toLocaleString('vi-VN')}‚Ç´`);
  if (extraFee) printer.println(`Ph·ª• thu:   +${extraFee.toLocaleString('vi-VN')}‚Ç´`);
  printer.setTextBold();
  printer.println(`T·ªîNG C·ªòNG:  ${total.toLocaleString('vi-VN')}‚Ç´`);
  printer.setTextNormal();
  printer.alignLeft();

  if (note) {
    printer.drawLine();
    printer.println(`Ghi ch√∫: ${note}`);
  }

  printer.drawLine();

  // ===== QR chuy·ªÉn kho·∫£n (n·∫øu c·∫ßn) =====
  if (showVietQR) {
    // Th√¥ng tin VietQR, tu·ª≥ ch·ªânh theo th·ª±c t·∫ø
    const bankBin = '970403';
    const account = 'TNG50523114517';
    const addInfo = encodeURIComponent(order.orderCode || order.id);
    const vietqrUrl = `https://img.vietqr.io/image/${bankBin}-${account}-print.png?amount=${total}&addInfo=${addInfo}`;
    printer.alignCenter();
    printer.println("Chuy·ªÉn kho·∫£n VietQR:");
    printer.println(`N·ªôi dung: ${decodeURIComponent(addInfo)}`);
    printer.println(`STK: ${account} (Techcombank)`);
    printer.println(vietqrUrl); // In link, n·∫øu m√°y in kh√¥ng h·ªó tr·ª£ ·∫£nh
    printer.alignLeft();
  }

  printer.alignCenter();
  printer.println("C·∫£m ∆°n qu√Ω kh√°ch!");
  printer.println("\n\n");
  printer.cut();

  return printer.execute();
}

// Endpoint duy nh·∫•t, truy·ªÅn t√™n m√°y in qua tr∆∞·ªùng "printer"
app.post('/print', async (req, res) => {
  const { printer: printerTarget = 'bar', ...billData } = req.body;
  const printerIp = PRINTERS[printerTarget];
  if (!printerIp) {
    return res.status(400).json({ error: 'Ch∆∞a ch·ªçn ƒë√∫ng m√°y in!' });
  }

  try {
    await buildAndPrintBill(billData, printerIp);
    res.send({ status: 'ok' });
  } catch (err) {
    console.error("L·ªói khi in:", err);
    res.status(500).send({ error: 'Kh√¥ng in ƒë∆∞·ª£c', details: err.message });
  }
});

// (tu·ª≥ ch·ªçn) T·∫°o endpoint ri√™ng cho t·ª´ng m√°y in, n·∫øu th√≠ch ki·ªÉu RESTful
app.post('/print/bar', async (req, res) => {
  try {
    await buildAndPrintBill(req.body, PRINTERS.bar);
    res.send({ status: 'ok' });
  } catch (err) {
    res.status(500).send({ error: 'Kh√¥ng in ƒë∆∞·ª£c', details: err.message });
  }
});

app.post('/print/bep', async (req, res) => {
  try {
    await buildAndPrintBill(req.body, PRINTERS.bep);
    res.send({ status: 'ok' });
  } catch (err) {
    res.status(500).send({ error: 'Kh√¥ng in ƒë∆∞·ª£c', details: err.message });
  }
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`üñ®Ô∏è  Print server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
  console.log(`M√°y in BAR: ${PRINTERS.bar}:9100`);
  console.log(`M√°y in B·∫æP: ${PRINTERS.bep}:9100`);
});
